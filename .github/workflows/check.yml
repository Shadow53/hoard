on: push

name: Checks and Releases

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      cargo: ${{ steps.filter.outputs.cargo }}
      pytests: ${{ steps.filter.outputs.pytests }}}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            cargo:
              - 'Cargo.toml'
              - 'Cargo.lock'
            rust:
              - '**/*.rs'
            pytests:
              - 'ci-tests/**'

  fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  check-stable:
    name: Check Commit
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.cargo == 'true' || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cargo Check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  check-nightly:
    name: Check Commit
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.cargo == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: llvm-tools-preview

      - name: Cargo Test (Grcov)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

      - name: Run grcov
        id: coverage
        uses: actions-rs/grcov@v0.1

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ steps.coverage.outputs.report }}

  integration-tests:
    name: "Integration Tests"
    needs: [check-stable, changes]
    if: ${{ needs.check-stable.result != 'failure' && (needs.changes.outputs.rust == 'true' || needs.changes.outputs.cargo == 'true' || needs.changes.outputs.pytests == 'true' || startsWith(github.ref, 'refs/tags/')) }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    steps:
      - uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cargo Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install tree (macos)
        if: matrix.os == 'macos-latest'
        run: brew install tree

      - name: Test Last Paths
        run: python ci-tests/test.py last_paths

      - name: Test Remote Operations
        run: python ci-tests/test.py operation

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    needs: [fmt, check-stable, integration-tests]
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        include:
          # LINUX TARGETS
          - os: "ubuntu-latest"
            target: aarch64-unknown-linux-gnu
          - os: "ubuntu-latest"
            target: aarch64-unknown-linux-musl
          - os: "ubuntu-latest"
            target: arm-unknown-linux-gnueabihf
          - os: "ubuntu-latest"
            target: arm-unknown-linux-musleabihf
          - os: "ubuntu-latest"
            target: i686-unknown-linux-gnueabihf
          - os: "ubuntu-latest"
            target: i686-unknown-linux-musleabihf
          - os: "ubuntu-latest"
            target: x86_64-unknown-linux-gnueabihf
          - os: "ubuntu-latest"
            target: x86_64-unknown-linux-musleabihf
          # ANDROID TARGETS
          - os: "ubuntu-latest"
            target: arm-linux-androideabi
          - os: "ubuntu-latest"
            target: armv7-linux-androideabi
          - os: "ubuntu-latest"
            target: i686-linux-androideabi
          - os: "ubuntu-latest"
            target: x86_64-linux-androideabi
          # MACOS TARGETS
          - os: "macos-latest"
            target: aarch64-apple-darwin
          - os: "macos-latest"
            target: x86_64-apple-darwin
          # WINDOWS TARGETS
          - os: "windows-latest"
            target: aarch64-pc-windows-msvc
          - os: "windows-latest"
            target: i686-pc-windows-msvc
          - os: "windows-latest"
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1

      - name: Install stable toolchain - ${{ matrix.target }}
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable
          override: true
          default: true
          profile: minimal

      - name: Build and Upload Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: hoard
          target: ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
